//@formatter:off
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package me.him188.ani.app.torrent.anitorrent.binding;

public class session_t {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected session_t(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(session_t obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(session_t obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        anitorrentJNI.delete_session_t(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void start(session_settings_t settings) {
    anitorrentJNI.session_t_start(swigCPtr, this, session_settings_t.getCPtr(settings), settings);
  }

  public void apply_settings(session_settings_t settings) {
    anitorrentJNI.session_t_apply_settings(swigCPtr, this, session_settings_t.getCPtr(settings), settings);
  }

  public void resume() {
    anitorrentJNI.session_t_resume(swigCPtr, this);
  }

  public boolean start_download(torrent_handle_t handle, torrent_add_info_t info, String save_path) {
    return anitorrentJNI.session_t_start_download(swigCPtr, this, torrent_handle_t.getCPtr(handle), handle, torrent_add_info_t.getCPtr(info), info, save_path);
  }

  public void release_handle(torrent_handle_t handle) {
    anitorrentJNI.session_t_release_handle(swigCPtr, this, torrent_handle_t.getCPtr(handle), handle);
  }

  public boolean set_new_event_listener(new_event_listener_t listener) {
    return anitorrentJNI.session_t_set_new_event_listener(swigCPtr, this, new_event_listener_t.getCPtr(listener), listener);
  }

  public void process_events(event_listener_t listener) {
    anitorrentJNI.session_t_process_events(swigCPtr, this, event_listener_t.getCPtr(listener), listener);
  }

  public void remove_listener() {
    anitorrentJNI.session_t_remove_listener(swigCPtr, this);
  }

  public void set_peer_filter(peer_filter_t filter) {
    anitorrentJNI.session_t_set_peer_filter(swigCPtr, this, peer_filter_t.getCPtr(filter), filter);
  }

  public void wait_for_alert(int timeout_seconds) {
    anitorrentJNI.session_t_wait_for_alert(swigCPtr, this, timeout_seconds);
  }

  public void post_session_stats() {
    anitorrentJNI.session_t_post_session_stats(swigCPtr, this);
  }

  public session_t() {
    this(anitorrentJNI.new_session_t(), true);
  }

}

//@formatter:on