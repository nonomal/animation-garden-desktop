//@formatter:off
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package me.him188.ani.app.torrent.anitorrent.binding;

public class torrent_stats_t {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected torrent_stats_t(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(torrent_stats_t obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(torrent_stats_t obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        anitorrentJNI.delete_torrent_stats_t(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setTotal(long value) {
    anitorrentJNI.torrent_stats_t_total_set(swigCPtr, this, value);
  }

  public long getTotal() {
    return anitorrentJNI.torrent_stats_t_total_get(swigCPtr, this);
  }

  public void setTotal_done(long value) {
    anitorrentJNI.torrent_stats_t_total_done_set(swigCPtr, this, value);
  }

  public long getTotal_done() {
    return anitorrentJNI.torrent_stats_t_total_done_get(swigCPtr, this);
  }

  public void setTotal_upload(long value) {
    anitorrentJNI.torrent_stats_t_total_upload_set(swigCPtr, this, value);
  }

  public long getTotal_upload() {
    return anitorrentJNI.torrent_stats_t_total_upload_get(swigCPtr, this);
  }

  public void setAll_time_upload(long value) {
    anitorrentJNI.torrent_stats_t_all_time_upload_set(swigCPtr, this, value);
  }

  public long getAll_time_upload() {
    return anitorrentJNI.torrent_stats_t_all_time_upload_get(swigCPtr, this);
  }

  public void setAll_time_download(long value) {
    anitorrentJNI.torrent_stats_t_all_time_download_set(swigCPtr, this, value);
  }

  public long getAll_time_download() {
    return anitorrentJNI.torrent_stats_t_all_time_download_get(swigCPtr, this);
  }

  public void setDownload_payload_rate(int value) {
    anitorrentJNI.torrent_stats_t_download_payload_rate_set(swigCPtr, this, value);
  }

  public int getDownload_payload_rate() {
    return anitorrentJNI.torrent_stats_t_download_payload_rate_get(swigCPtr, this);
  }

  public void setUpload_payload_rate(int value) {
    anitorrentJNI.torrent_stats_t_upload_payload_rate_set(swigCPtr, this, value);
  }

  public int getUpload_payload_rate() {
    return anitorrentJNI.torrent_stats_t_upload_payload_rate_get(swigCPtr, this);
  }

  public void setTotal_payload_download(long value) {
    anitorrentJNI.torrent_stats_t_total_payload_download_set(swigCPtr, this, value);
  }

  public long getTotal_payload_download() {
    return anitorrentJNI.torrent_stats_t_total_payload_download_get(swigCPtr, this);
  }

  public void setTotal_payload_upload(long value) {
    anitorrentJNI.torrent_stats_t_total_payload_upload_set(swigCPtr, this, value);
  }

  public long getTotal_payload_upload() {
    return anitorrentJNI.torrent_stats_t_total_payload_upload_get(swigCPtr, this);
  }

  public void setProgress(float value) {
    anitorrentJNI.torrent_stats_t_progress_set(swigCPtr, this, value);
  }

  public float getProgress() {
    return anitorrentJNI.torrent_stats_t_progress_get(swigCPtr, this);
  }

  public torrent_stats_t() {
    this(anitorrentJNI.new_torrent_stats_t(), true);
  }

}

//@formatter:on